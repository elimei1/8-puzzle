from Heuristics import Heuristics
from PuzzleState import PuzzleState
from Solver import Solver


# Calculate the mean time and mean expanded nodes
# 100 random states for both heuristics
# Seperated from the main classes, just for comparison
class HeuristicEvaluation:
    def __init__(self, states):
        self.states = states

    def evaluate(self, heuristic):
        total_time = 0
        total_nodes_expanded = 0
        run_count = 0   # to see the number of runs in the console
        for state in self.states:
            puzzle_state = PuzzleState(state)
            puzzle_state.is_solvable()
            solver = Solver(puzzle_state, heuristic)
            _, time_taken, nodes_expanded = solver.solve()
            run_count += 1
            print(run_count, round(time_taken, 4))  # see run number and time in console
            total_time += time_taken
            total_nodes_expanded += nodes_expanded
        mean_time = total_time / len(self.states)   # calculate mean time
        mean_nodes = total_nodes_expanded / len(self.states)    # calculate mean expanded nodes
        return mean_time, mean_nodes


def run_evaluation():
    predefined_states = [   # 100 random states
        [[1, 2, 3], [0, 4, 6], [7, 5, 8]],
        [[1, 2, 3], [7, 4, 0], [6, 5, 8]],
        [[0, 1, 3], [4, 2, 5], [7, 8, 6]],
        [[1, 2, 3], [4, 0, 5], [7, 8, 6]],
        [[1, 2, 3], [4, 5, 6], [7, 0, 8]],
        [[0, 2, 3], [1, 4, 5], [7, 8, 6]],
        [[1, 4, 2], [3, 0, 5], [7, 8, 6]],
        [[1, 3, 5], [4, 2, 0], [7, 8, 6]],
        [[0, 1, 2], [4, 5, 3], [7, 8, 6]],
        [[1, 5, 2], [4, 0, 3], [7, 8, 6]],
        [[1, 2, 3], [4, 5, 6], [7, 8, 0]],
        [[1, 2, 3], [4, 5, 6], [0, 7, 8]],
        [[1, 2, 3], [5, 0, 6], [4, 7, 8]],
        [[1, 2, 3], [4, 0, 6], [7, 5, 8]],
        [[1, 2, 3], [5, 0, 6], [4, 7, 8]],
        [[1, 2, 3], [4, 7, 6], [0, 5, 8]],
        [[0, 1, 3], [4, 2, 5], [7, 8, 6]],
        [[1, 2, 3], [4, 5, 6], [8, 0, 7]],
        [[2, 6, 3], [1, 5, 8], [4, 7, 0]],
        [[5, 4, 0], [6, 1, 8], [7, 3, 2]],
        [[1, 2, 3], [0, 4, 6], [7, 5, 8]],
        [[4, 1, 2], [7, 0, 3], [5, 8, 6]],
        [[1, 2, 3], [4, 6, 0], [7, 5, 8]],
        [[3, 1, 2], [4, 7, 5], [0, 8, 6]],
        [[1, 2, 3], [7, 4, 6], [0, 5, 8]],
        [[1, 2, 3], [4, 5, 6], [7, 8, 0]],
        [[0, 1, 2], [4, 5, 3], [7, 8, 6]],
        [[1, 4, 2], [0, 3, 5], [7, 8, 6]],
        [[1, 2, 3], [7, 4, 6], [8, 5, 0]],
        [[1, 2, 3], [5, 0, 6], [4, 7, 8]],
        [[2, 1, 3], [4, 5, 6], [7, 8, 0]],
        [[1, 2, 3], [4, 5, 6], [8, 7, 0]],
        [[1, 2, 3], [4, 5, 6], [0, 7, 8]],
        [[1, 2, 3], [5, 0, 6], [4, 7, 8]],
        [[1, 2, 3], [4, 0, 6], [7, 5, 8]],
        [[1, 2, 3], [4, 7, 6], [5, 8, 0]],
        [[1, 3, 6], [4, 2, 5], [7, 0, 8]],
        [[0, 1, 3], [4, 2, 5], [7, 8, 6]],
        [[1, 6, 7], [5, 0, 3], [4, 8, 2]],
        [[2, 6, 3], [1, 5, 8], [4, 7, 0]],
        [[0, 1, 2], [4, 5, 3], [7, 8, 6]],
        [[1, 2, 3], [4, 5, 6], [7, 0, 8]],
        [[1, 2, 3], [4, 0, 6], [7, 5, 8]],
        [[1, 2, 3], [0, 4, 6], [7, 5, 8]],
        [[1, 2, 3], [4, 5, 6], [8, 7, 0]],
        [[0, 1, 3], [4, 2, 5], [7, 8, 6]],
        [[1, 3, 5], [4, 2, 0], [7, 8, 6]],
        [[1, 2, 3], [5, 0, 6], [4, 7, 8]],
        [[1, 2, 3], [4, 7, 6], [5, 8, 0]],
        [[1, 2, 3], [4, 5, 6], [0, 7, 8]],
        [[1, 0, 2], [4, 5, 3], [7, 8, 6]],
        [[1, 3, 2], [4, 5, 6], [7, 0, 8]],
        [[1, 2, 3], [4, 6, 0], [7, 5, 8]],
        [[1, 5, 2], [4, 0, 3], [7, 8, 6]],
        [[2, 1, 3], [4, 5, 6], [0, 7, 8]],
        [[1, 2, 3], [4, 0, 6], [7, 8, 5]],
        [[1, 2, 3], [4, 5, 6], [7, 8, 0]],
        [[0, 1, 2], [4, 5, 3], [7, 8, 6]],
        [[1, 2, 3], [4, 5, 6], [8, 7, 0]],
        [[1, 2, 3], [4, 0, 6], [7, 5, 8]],
        [[2, 1, 3], [4, 5, 6], [7, 8, 0]],
        [[1, 2, 3], [5, 8, 0], [4, 7, 6]],
        [[0, 1, 2], [4, 5, 3], [7, 8, 6]],
        [[1, 2, 3], [4, 6, 0], [7, 5, 8]],
        [[1, 0, 2], [4, 5, 3], [7, 8, 6]],
        [[2, 1, 3], [4, 0, 5], [7, 8, 6]],
        [[1, 2, 3], [4, 5, 6], [7, 0, 8]],
        [[1, 2, 3], [0, 4, 5], [7, 8, 6]],
        [[1, 2, 3], [4, 5, 0], [7, 8, 6]],
        [[1, 2, 3], [4, 0, 5], [7, 8, 6]],
        [[1, 2, 3], [4, 5, 6], [0, 7, 8]],
        [[1, 2, 3], [4, 5, 6], [7, 8, 0]],
        [[1, 3, 2], [4, 5, 6], [7, 8, 0]],
        [[0, 1, 2], [4, 5, 3], [7, 8, 6]],
        [[1, 2, 3], [4, 5, 6], [8, 7, 0]],
        [[1, 2, 3], [4, 0, 6], [7, 5, 8]],
        [[1, 2, 3], [4, 5, 6], [7, 0, 8]],
        [[2, 1, 3], [4, 5, 6], [0, 7, 8]],
        [[1, 2, 3], [4, 6, 0], [7, 5, 8]],
        [[1, 2, 3], [4, 0, 5], [7, 8, 6]],
        [[4, 1, 2], [7, 5, 3], [0, 8, 6]],
        [[5, 0, 2], [1, 4, 3], [7, 8, 6]],
        [[2, 4, 3], [1, 5, 6], [7, 0, 8]],
        [[4, 1, 2], [7, 5, 3], [0, 8, 6]],
        [[5, 4, 0], [6, 1, 2], [7, 3, 8]],
        [[2, 0, 3], [1, 4, 5], [7, 8, 6]],
        [[2, 4, 3], [1, 5, 8], [7, 0, 6]],
        [[4, 1, 2], [7, 5, 3], [0, 8, 6]],
        [[5, 4, 0], [1, 2, 3], [7, 8, 6]],
        [[0, 4, 2], [1, 5, 3], [7, 8, 6]],
        [[4, 0, 2], [1, 5, 3], [7, 8, 6]],
        [[5, 1, 2], [0, 4, 3], [7, 8, 6]],
        [[2, 5, 3], [1, 4, 6], [7, 8, 0]],
        [[0, 1, 2], [4, 5, 3], [7, 6, 8]],
        [[1, 4, 2], [0, 5, 3], [7, 8, 6]],
        [[2, 1, 3], [4, 0, 5], [7, 8, 6]],
        [[4, 1, 2], [7, 5, 3], [8, 6, 0]],
        [[5, 1, 2], [4, 0, 3], [7, 8, 6]],
        [[2, 4, 3], [1, 5, 6], [0, 7, 8]],
        [[4, 0, 2], [1, 5, 3], [7, 8, 6]]
    ]

    evaluator = HeuristicEvaluation(predefined_states)

    manhattan_time, manhattan_nodes = evaluator.evaluate(Heuristics.manhattan_distance)
    print(f"Manhattan Heuristic - Mean Time: {round(manhattan_time, 2)}s, Mean Expanded Nodes: {manhattan_nodes}")

    hamming_time, hamming_nodes = evaluator.evaluate(Heuristics.hamming_distance)
    print(f"Hamming Heuristic - Mean Time: {round(hamming_time, 2)}, Mean Expanded Nodes: {hamming_nodes}")


if __name__ == '__main__':
    run_evaluation()
